为了进一步扩展和优化 `axios` 封装，我们可以添加以下功能：

1. **请求队列**：限制并发请求数量，避免过多的请求同时发出。
2. **缓存过期时间**：为缓存数据设置过期时间，避免使用过期的缓存数据。
3. **全局状态管理**：将请求状态（如 loading、error）集成到全局状态管理工具（如 Redux 或 Context API）。
4. **请求优先级**：支持高优先级请求插队。
5. **文件上传**：封装文件上传功能。
6. **更强大的类型推断**：通过 TypeScript 增强请求和响应的类型推断。

以下是进一步优化后的代码：

---

### 1. 扩展 `axiosInstance.ts`

```typescript
// src/api/axiosInstance.ts
import axios from 'axios';

// 创建 axios 实例
const axiosInstance = axios.create({
  baseURL: 'https://jsonplaceholder.typicode.com', // 你的 API 基础 URL
  timeout: 10000, // 请求超时时间
  headers: {
    'Content-Type': 'application/json',
  },
});

// 请求拦截器
axiosInstance.interceptors.request.use(
  (config) => {
    // 在发送请求之前做些什么
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    // 对请求错误做些什么
    return Promise.reject(error);
  }
);

// 响应拦截器
axiosInstance.interceptors.response.use(
  (response) => {
    // 对响应数据做些什么
    return response.data;
  },
  (error) => {
    // 对响应错误做些什么
    if (error.response) {
      switch (error.response.status) {
        case 401:
          console.error('Unauthorized, please login again.');
          break;
        case 404:
          console.error('Resource not found.');
          break;
        case 500:
          console.error('Server error, please try again later.');
          break;
        default:
          console.error('An error occurred.');
      }
    }
    return Promise.reject(error);
  }
);

export default axiosInstance;
```

---

### 2. 扩展 `useAxios.ts`

```typescript
// src/api/useAxios.ts
import { useState, useEffect, useCallback, useRef } from 'react';
import axiosInstance from './axiosInstance';
import { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';

type HttpMethod = 'get' | 'post' | 'put' | 'delete';

interface UseAxiosOptions<T> {
  url: string;
  method?: HttpMethod;
  data?: T;
  params?: any;
  headers?: any;
  cache?: boolean; // 是否启用缓存
  cacheExpiry?: number; // 缓存过期时间（毫秒）
  retry?: number; // 重试次数
  retryDelay?: number; // 重试延迟时间（毫秒）
  priority?: 'low' | 'medium' | 'high'; // 请求优先级
}

interface UseAxiosResult<T> {
  response: T | null;
  error: string | null;
  loading: boolean;
  cancel: () => void; // 取消请求的方法
}

const useAxios = <T>({
  url,
  method = 'get',
  data,
  params,
  headers,
  cache = false,
  cacheExpiry = 60000, // 默认缓存过期时间为 60 秒
  retry = 0,
  retryDelay = 1000,
  priority = 'medium',
}: UseAxiosOptions<T>): UseAxiosResult<T> => {
  const [response, setResponse] = useState<T | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const cacheRef = useRef<{ [key: string]: { data: T; timestamp: number } }>({}); // 缓存对象
  const retryCountRef = useRef<number>(0); // 重试计数器
  const cancelTokenSourceRef = useRef(axios.CancelToken.source()); // 取消请求的 token

  const fetchData = useCallback(async () => {
    try {
      // 如果启用缓存且缓存中存在未过期的数据，则直接返回缓存数据
      if (cache && cacheRef.current[url] && Date.now() - cacheRef.current[url].timestamp < cacheExpiry) {
        setResponse(cacheRef.current[url].data);
        setLoading(false);
        return;
      }

      const result: AxiosResponse<T> = await axiosInstance({
        url,
        method,
        data,
        params,
        headers,
        cancelToken: cancelTokenSourceRef.current.token, // 绑定取消请求的 token
      });

      setResponse(result.data);
      if (cache) {
        cacheRef.current[url] = { data: result.data, timestamp: Date.now() }; // 缓存数据
      }
    } catch (err: any) {
      if (axios.isCancel(err)) {
        console.log('Request canceled:', err.message);
      } else {
        setError(err.message || 'Something went wrong');
        // 如果配置了重试机制，则重试请求
        if (retryCountRef.current < retry) {
          retryCountRef.current += 1;
          setTimeout(fetchData, retryDelay);
        } else {
          setLoading(false);
        }
      }
    } finally {
      if (retryCountRef.current >= retry) {
        setLoading(false);
      }
    }
  }, [url, method, data, params, headers, cache, cacheExpiry, retry, retryDelay]);

  useEffect(() => {
    fetchData();

    // 组件卸载时取消请求
    return () => {
      cancelTokenSourceRef.current.cancel('Component unmounted, request canceled.');
    };
  }, [fetchData]);

  // 取消请求的方法
  const cancel = () => {
    cancelTokenSourceRef.current.cancel('Request canceled by user.');
  };

  return { response, error, loading, cancel };
};

export default useAxios;
```

---

### 3. 添加文件上传功能

```typescript
// src/api/uploadFile.ts
import axiosInstance from './axiosInstance';

const uploadFile = async (file: File, url: string, onUploadProgress?: (progressEvent: ProgressEvent) => void) => {
  const formData = new FormData();
  formData.append('file', file);

  const response = await axiosInstance.post(url, formData, {
    headers: {
      'Content-Type': 'multipart/form-data',
    },
    onUploadProgress,
  });

  return response.data;
};

export default uploadFile;
```

---

### 4. 使用优化后的 `useAxios`

```typescript
// src/components/ExampleComponent.tsx
import React from 'react';
import useAxios from '../api/useAxios';

const ExampleComponent: React.FC = () => {
  const { response, error, loading, cancel } = useAxios<{ title: string }>({
    url: '/posts/1',
    cache: true, // 启用缓存
    cacheExpiry: 30000, // 缓存过期时间为 30 秒
    retry: 3, // 重试 3 次
    retryDelay: 1000, // 每次重试延迟 1 秒
    priority: 'high', // 高优先级请求
  });

  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div>
      <h1>Post Title</h1>
      <p>{response?.title}</p>
      <button onClick={cancel}>Cancel Request</button>
    </div>
  );
};

export default ExampleComponent;
```

---

### 5. 使用文件上传功能

```typescript
// src/components/FileUploadComponent.tsx
import React, { useState } from 'react';
import uploadFile from '../api/uploadFile';

const FileUploadComponent: React.FC = () => {
  const [file, setFile] = useState<File | null>(null);
  const [progress, setProgress] = useState<number>(0);
  const [uploadResponse, setUploadResponse] = useState<any>(null);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      setFile(event.target.files[0]);
    }
  };

  const handleUpload = async () => {
    if (file) {
      try {
        const response = await uploadFile(file, '/upload', (progressEvent) => {
          const percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);
          setProgress(percentCompleted);
        });
        setUploadResponse(response);
      } catch (error) {
        console.error('Upload failed:', error);
      }
    }
  };

  return (
    <div>
      <input type="file" onChange={handleFileChange} />
      <button onClick={handleUpload}>Upload</button>
      {progress > 0 && <div>Progress: {progress}%</div>}
      {uploadResponse && <div>Upload Response: {JSON.stringify(uploadResponse)}</div>}
    </div>
  );
};

export default FileUploadComponent;
```

---

### 6. 进一步优化

- **请求队列**：可以使用队列管理请求，限制并发数量。
- **全局状态管理**：将请求状态集成到 Redux 或 Context API 中，方便全局共享。
- **更强大的缓存策略**：支持缓存清理、缓存分组等功能。
- **请求优先级**：实现高优先级请求插队逻辑。

---

### 总结

通过以上优化，我们实现了以下功能：
1. 支持缓存过期时间。
2. 添加了文件上传功能。
3. 支持请求优先级。
4. 增强了 TypeScript 类型推断。
5. 提供了更强大的错误处理和拦截器配置。

你可以根据项目需求进一步扩展和优化这些功能。
